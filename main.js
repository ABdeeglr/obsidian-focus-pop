/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FocusPop
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/focusPopSettingTab.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  concentration_lasting: "90",
  interval_min: "3",
  // 提醒间隔(min) 
  interval_max: "5",
  // 提醒间隔(max) 
  interval_last: "10",
  // 休息时长
  long_interval_last: "20",
  // 长休息时长
  audio_played_on_interval_start: null,
  // 提示音1
  audio_played_on_interval_end: null,
  // 提示音2
  audio_played_on_long_interval: null
  // 提示音3
};
var FocusPopSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u4E13\u6CE8\u5468\u671F\u65F6\u957F").setDesc("\u9ED8\u8BA4\u4E3A 90 \u5206\u949F").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.concentration_lasting).onChange(async (value) => {
        this.plugin.settings.concentration_lasting = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u6700\u77ED\u63D0\u9192\u95F4\u9694").setDesc("\u6700\u77ED\u63D0\u9192\u95F4\u9694 \uFF08min), \u9ED8\u8BA4\u4E3A 3 \u5206\u949F").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.interval_min).onChange(async (value) => {
        this.plugin.settings.interval_min = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u6700\u957F\u63D0\u9192\u95F4\u9694").setDesc("\u6700\u957F\u63D0\u9192\u95F4\u9694 \uFF08max), \u9ED8\u8BA4\u4E3A 5 \u5206\u949F").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.interval_max).onChange(async (value) => {
        this.plugin.settings.interval_max = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u4F11\u606F\u65F6\u957F").setDesc("\u9ED8\u8BA4\u4E3A 10 \u79D2").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.interval_last).onChange(async (value) => {
        this.plugin.settings.interval_last = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u957F\u4F11\u606F\u65F6\u957F").setDesc("\u957F\u4F11\u606F\u65F6\u957F\uFF0C\u9ED8\u8BA4\u4E3A 20 \u5206\u949F").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.long_interval_last).onChange(async (value) => {
        this.plugin.settings.long_interval_last = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u63D0\u793A\u97F31").setDesc("\u5728\u77ED\u4F11\u606F\u5F00\u59CB\u65F6\u64AD\u653E\u7684\u97F3\u9891, \u4E0D\u5EFA\u8BAE\u4F7F\u7528\u8F83\u957F\u7684\u97F3\u9891\n\u586B\u5199\u5B8C\u6574\u7684\u6587\u4EF6\u8DEF\u5F84\u540D\n\u4F8B\u5982\uFF1Aappendx\u76EE\u5F55\u4E0B\u7684\u97F3\u9891\u6587\u4EF6ding.flac, \u5219\u586B\u5199\u4E3A appendix/ding.flac").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.audio_played_on_interval_start).onChange(async (value) => {
        this.plugin.settings.audio_played_on_interval_start = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u63D0\u793A\u97F32").setDesc("\u5728\u77ED\u4F11\u606F\u7ED3\u675F\u65F6\u64AD\u653E\u7684\u97F3\u9891, \u4E0D\u5EFA\u8BAE\u4F7F\u7528\u8F83\u957F\u7684\u97F3\u9891\n\u586B\u5199\u5B8C\u6574\u7684\u6587\u4EF6\u8DEF\u5F84\u540D\n\u4F8B\u5982\uFF1Aappendx\u76EE\u5F55\u4E0B\u7684\u97F3\u9891\u6587\u4EF6ding.flac, \u5219\u586B\u5199\u4E3A appendix/ding.flac").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.audio_played_on_interval_end).onChange(async (value) => {
        this.plugin.settings.audio_played_on_interval_end = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u63D0\u793A\u97F33").setDesc("\u5728\u957F\u4F11\u606F\u5F00\u59CB\u65F6\u64AD\u653E\u7684\u97F3\u9891\n\u586B\u5199\u5B8C\u6574\u7684\u6587\u4EF6\u8DEF\u5F84\u540D\n\u4F8B\u5982\uFF1Aappendx\u76EE\u5F55\u4E0B\u7684\u97F3\u9891\u6587\u4EF6ding.flac, \u5219\u586B\u5199\u4E3A appendix/ding.flac").addText(
      (text) => text.setPlaceholder("filename with mp3/wav/... etc").setValue(this.plugin.settings.audio_played_on_long_interval).onChange(async (value) => {
        this.plugin.settings.audio_played_on_long_interval = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/audiomgr.ts
function createAudioManager() {
  let audioCtx = null;
  const init = () => {
    if (!audioCtx) {
      audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    }
    return audioCtx;
  };
  const destroy = async () => {
    if (audioCtx) {
      await audioCtx.close();
      audioCtx = null;
    }
  };
  const playAudio = async (url, delay = 0) => {
    const ctx = init();
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    const audioBuffer = await ctx.decodeAudioData(arrayBuffer);
    const source = ctx.createBufferSource();
    source.buffer = audioBuffer;
    source.connect(ctx.destination);
    source.start(ctx.currentTime + delay);
    return source;
  };
  const playAudioSequence = async (url, times) => {
    const ctx = init();
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    const audioBuffer = await ctx.decodeAudioData(arrayBuffer);
    const sources = [];
    for (const t of times) {
      const source = ctx.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(ctx.destination);
      source.start(ctx.currentTime + t);
      sources.push(source);
    }
    return sources;
  };
  const res = {
    init,
    playAudio,
    playAudioSequence,
    destroy
  };
  return res;
}

// src/main.ts
var FocusPop = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.status = 0 /* ready */;
    this.naughtiness_index = 0;
    // audio_urls : string[] = []; // 本地音频文件的 obsidian url
    this.audio_mgr = null;
    // 记录每次状态变更的时间戳
    this.concentration_deposit_time = 0;
  }
  async onload() {
    await this.loadSettings();
    this.audio_mgr = createAudioManager();
    const ribbonIconEl_start = this.addRibbonIcon("play", "\u5F00\u59CB\u4E13\u6CE8", (evt) => {
      if (this.status === 0 /* ready */) {
        this.transaction_from_ready_to_running();
        this.reset_naughtiness_index();
      } else if (this.status === 2 /* pause */) {
        this.transaction_from_pause_to_running();
        this.reset_naughtiness_index();
      } else {
        this.improve_naughtiness_index();
      }
      this.update_SBI_concentration_status();
      console.log(this.status);
    });
    ribbonIconEl_start.addClass("focus-pop-ribbon-class");
    const ribbonIconEl_pause = this.addRibbonIcon("pause", "\u505C\u6B62\u8BA1\u65F6", (evt) => {
      if (this.status === 1 /* running */) {
        this.transaction_from_running_to_pause();
        this.reset_naughtiness_index();
      } else {
        this.improve_naughtiness_index();
      }
      this.update_SBI_concentration_status();
      console.log(this.status);
    });
    ribbonIconEl_pause.addClass("focus-pop-ribbon-class");
    const ribbonIconEl_stop = this.addRibbonIcon("circle-power", "\u7ED3\u675F\u4E13\u6CE8", (evt) => {
      if (this.status === 1 /* running */) {
        this.transaction_from_running_to_ready();
        this.reset_naughtiness_index();
      } else if (this.status === 2 /* pause */) {
        this.transaction_from_pause_to_ready();
        this.reset_naughtiness_index();
      } else {
        this.improve_naughtiness_index();
      }
      this.update_SBI_concentration_status();
      console.log(this.status);
    });
    ribbonIconEl_stop.addClass("focus-pop-ribbon-class");
    this.SBI_concentration_status = this.addStatusBarItem();
    this.SBI_concentration_status.setText("\u4E13\u6CE8\u72B6\u6001: \u5C1A\u672A\u5F00\u59CB");
    this.SBI_concentration_lasting = this.addStatusBarItem();
    this.SBI_concentration_lasting.setText("\u5DF2\u4E13\u6CE8: 00:00:00");
    this.registerInterval(
      window.setInterval(() => {
        this.update_SBI_concentration_lasting();
        if (this.concentration_deposit_time + Math.floor((Date.now() - this.last_transaction_time) / 1e3) >= 90 * 60) {
          new import_obsidian2.Notice("\u4E13\u6CE8\u65F6\u957F\u5DF2\u7ECF\u5230\u8FBE 90 \u5206\u949F\uFF01", 1e4);
        }
      }, 1e3)
    );
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "\u5C55\u793A\u4E13\u6CE8\u7EDF\u8BA1",
      callback: () => {
        new ConcentrationStaticModal(this.app).open();
      }
    });
    this.addCommand({
      id: "test-play-audio",
      name: "\u6D4B\u8BD5\u97F3\u9891\u64AD\u653E",
      callback: () => {
        this.play_audio_right_now();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new ConcentrationStaticModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new FocusPopSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
    if (this.audio_mgr != null) {
      this.audio_mgr.destroy();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * 在设置变更后更新音频 URL
   */
  // async update_audio_urls() {
  //   console.log(this.settings.audio_played_on_interval_start);
  //   const audio1 = this.get_audio_url_by_settings_item(this.settings.audio_played_on_interval_start);
  //   console.log(audio1);
  //   console.log(this.settings.audio_played_on_interval_end);
  //   const audio2 = this.get_audio_url_by_settings_item(this.settings.audio_played_on_interval_end);
  //   console.log(audio2);
  //   console.log(this.settings.audio_played_on_long_interval);
  //   const audio3 = this.get_audio_url_by_settings_item(this.settings.audio_played_on_long_interval);
  //   console.log(audio3);
  //   this.audio_urls = [audio1, audio2, audio3];
  // }
  /***********************************
   **                               **
   **       状态转移 handler         **
   **                               **
   **********************************/
  /**
   * 在就绪状态下按下开始按钮
   */
  transaction_from_ready_to_running() {
    console.log(`\u72B6\u6001\u8F6C\u79FB: ${this.status} -> ${1 /* running */}`);
    this.update_last_transaction_time();
    new import_obsidian2.Notice("\u5F00\u59CB\u4E13\u6CE8~", 1500);
    this.status = 1 /* running */;
    this.play_audio_right_now();
    this.play_audio_on_transfer_to_running(this.concentration_deposit_time);
  }
  /**
   * 在专注状态下按下暂停按钮
   */
  transaction_from_running_to_pause() {
    console.log(`\u72B6\u6001\u8F6C\u79FB: ${this.status} -> ${2 /* pause */}`);
    this.append_concentration_deposit_time();
    this.update_last_transaction_time();
    new import_obsidian2.Notice("\u505C\u6B62\u4E13\u6CE8 @~@", 1500);
    this.status = 2 /* pause */;
    this.stop_all_audios_on_terminate_or_pause();
  }
  /**
   * 在暂停状态下按下专注按钮
   */
  transaction_from_pause_to_running() {
    console.log(`\u72B6\u6001\u8F6C\u79FB: ${this.status} -> ${1 /* running */}`);
    this.update_last_transaction_time();
    new import_obsidian2.Notice("\u6062\u590D\u4E13\u6CE8", 1500);
    this.status = 1 /* running */;
    this.play_audio_right_now();
    this.play_audio_on_transfer_to_running(this.concentration_deposit_time);
  }
  /**
   * 在暂停状态下按下终止按钮
   */
  transaction_from_pause_to_ready() {
    console.log(`\u72B6\u6001\u8F6C\u79FB: ${this.status} -> ${0 /* ready */}`);
    this.append_concentration_deposit_time();
    this.upload_concentrating_habit_data();
    this.reset_concentration_deposit_time();
    this.update_last_transaction_time();
    console.log(this.naughtiness_index);
    new import_obsidian2.Notice("\u7EC8\u6B62\u4E13\u6CE8", 2e3);
    this.status = 0 /* ready */;
    this.stop_all_audios_on_terminate_or_pause();
  }
  /**
   * 在正常运行状态下按下终止按钮
   */
  transaction_from_running_to_ready() {
    console.log(`\u72B6\u6001\u8F6C\u79FB: ${this.status} -> ${0 /* ready */}`);
    this.append_concentration_deposit_time();
    this.upload_concentrating_habit_data();
    this.reset_concentration_deposit_time();
    this.update_last_transaction_time();
    console.log(this.naughtiness_index);
    new import_obsidian2.Notice("\u7EC8\u6B62\u4E13\u6CE8", 2e3);
    this.status = 0 /* ready */;
    this.stop_all_audios_on_terminate_or_pause();
  }
  /***********************************
   **                               **
   **          其 他 函 数           **
   **                               **
   **********************************/
  /**
   * 确保 this plugin 能够正确获取到音频文件的 obsidian url
   * @param path_from_settings - 从设置中获取的音频文件路径字符串
   * @returns 
   */
  get_audio_url_by_settings_item(path_from_settings) {
    const file = this.app.vault.getAbstractFileByPath(path_from_settings);
    if (file instanceof import_obsidian2.TFile) {
      const resourcePath = this.app.vault.getResourcePath(file);
      return resourcePath;
    } else {
      console.log("\u97F3\u9891\u6587\u4EF6\u4E0D\u5B58\u5728\uFF0C\u6216\u8DEF\u5F84\u6307\u5411\u7684\u4E0D\u662F\u97F3\u9891\u6587\u4EF6");
      new import_obsidian2.Notice(`\u97F3\u9891\u6587\u4EF6\u4E0D\u5B58\u5728\uFF0C\u6216\u8DEF\u5F84\u6307\u5411\u7684\u4E0D\u662F\u97F3\u9891\u6587\u4EF6: ${path_from_settings}`, 2e3);
      return null;
    }
  }
  /**
   * 根据已经专注的时长，当当前状态转移到专注状态时，根据配置文件注册未来的随机提示音时间
   * @param has_been_deposit 已经追加、累积的专注时长，单位（秒）
   */
  play_audio_on_transfer_to_running(has_been_deposit) {
    const audio_url_1 = this.get_audio_url_by_settings_item(this.settings.audio_played_on_interval_start);
    const audio_url_2 = this.get_audio_url_by_settings_item(this.settings.audio_played_on_interval_end);
    const audio_url_3 = this.get_audio_url_by_settings_item(this.settings.audio_played_on_long_interval);
    const future_total = Math.floor(Number(this.settings.concentration_lasting)) * 60;
    const to_be_concentrate = future_total - has_been_deposit;
    const interval_min = Math.floor(Number(this.settings.interval_min)) * 60;
    const interval_max = Math.floor(Number(this.settings.interval_max)) * 60;
    const intervals = this.randomSplit(to_be_concentrate, interval_min, interval_max);
    this.audio_mgr.playAudioSequence(audio_url_1, intervals);
    this.audio_mgr.playAudioSequence(audio_url_2, intervals.map((t) => t + 3 + Math.floor(Number(this.settings.interval_last))));
    this.audio_mgr.playAudio(audio_url_3, to_be_concentrate);
  }
  randomSplit(total, interval_min, interval_max) {
    const result = [];
    let current = 0;
    while (current < total) {
      const step = Math.floor(
        Math.random() * (interval_max - interval_min + 1)
      ) + interval_min;
      current += step;
      result.push(current);
    }
    result.pop();
    return result;
  }
  /**
   * 立刻播放提示音，用于专注启动、恢复时的用户感知
   * @param audio_url - 如果不传入参数，则默认播放第一个音频
   * @returns 
   */
  play_audio_right_now(audio_url = this.get_audio_url_by_settings_item(this.settings.audio_played_on_interval_start)) {
    this.audio_mgr.playAudio(audio_url);
  }
  /**
   * 在暂停或结束专注时，清空音频播放内容
   */
  stop_all_audios_on_terminate_or_pause() {
    this.audio_mgr.destroy();
    this.audio_mgr = createAudioManager();
  }
  /**
   * @returns 返回当前状态的字符串表示
   */
  status_to_string() {
    if (this.status == 0) {
      return "\u7B49\u5F85\u4E13\u6CE8";
    } else if (this.status == 1) {
      return "\u6B63\u5728\u4E13\u6CE8";
    } else {
      return "\u6682\u505C\u4E13\u6CE8";
    }
  }
  update_SBI_concentration_status() {
    this.SBI_concentration_status.setText(`\u4E13\u6CE8\u72B6\u6001: ${this.status_to_string()}`);
  }
  update_SBI_concentration_lasting() {
    if (this.status == 0 || this.status == 2) {
      this.SBI_concentration_lasting.setText(`\u5DF2\u4E13\u6CE8: ${this.time_format(this.concentration_deposit_time)}`);
    } else if (this.status == 1) {
      const now = Date.now();
      const delta = Math.floor((now - this.last_transaction_time) / 1e3);
      this.SBI_concentration_lasting.setText(`\u5DF2\u4E13\u6CE8: ${this.time_format(this.concentration_deposit_time + delta)}`);
    } else {
      this.SBI_concentration_lasting.setText(`\u5DF2\u4E13\u6CE8: 00:00:00`);
    }
  }
  time_format(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor(seconds % 3600 / 60);
    const secs = seconds % 60;
    return `${hrs.toString().padStart(2, "0")}:${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  }
  update_last_transaction_time() {
    this.last_transaction_time = Date.now();
  }
  set_concentration_deposit_time(seconds) {
    this.concentration_deposit_time = seconds;
  }
  reset_concentration_deposit_time() {
    this.concentration_deposit_time = 0;
  }
  append_concentration_deposit_time() {
    const now = Date.now();
    const delta = Math.floor((now - this.last_transaction_time) / 1e3);
    this.set_concentration_deposit_time(this.concentration_deposit_time + delta);
  }
  /**
   * **UNFINISHED** 等待以后更新
   * 上传专注习惯数据
   */
  upload_concentrating_habit_data() {
    console.log("\uFF08\u6682\u65F6\u4EC0\u4E48\u90FD\u4E0D\u505A\uFF09\u4E0A\u4F20\u4E13\u6CE8\u4E60\u60EF\u6570\u636E");
  }
  /**
   * 重置调皮指数
   */
  reset_naughtiness_index() {
    if (this.status == 0) {
      console.log("\u5F53\u524D\u72B6\u6001: Ready");
    } else if (this.status == 1) {
      console.log("\u5F53\u524D\u72B6\u6001: Running");
    } else {
      console.log("\u5F53\u524D\u72B6\u6001: Pasue");
    }
    console.log("\u8C03\u76AE\u6307\u6570\u5F52\u96F6");
    this.naughtiness_index = 0;
  }
  /**
   * 调皮指数+1
   */
  improve_naughtiness_index() {
    if (this.status == 0) {
      console.log("\u5F53\u524D\u72B6\u6001: Ready");
    } else if (this.status == 1) {
      console.log("\u5F53\u524D\u72B6\u6001: Running");
    } else {
      console.log("\u5F53\u524D\u72B6\u6001: Pasue");
    }
    console.log("\u53D8\u5F97\u66F4\u8C03\u76AE\u4E86: ", this.naughtiness_index + 1);
    this.naughtiness_index += 1;
    if (this.naughtiness_index < 7) {
      return;
    } else if (this.naughtiness_index >= 7 && this.naughtiness_index <= 18) {
      new import_obsidian2.Notice("\u4E0D\u8981\u8C03\u76AE~", 3e3);
    } else {
      new import_obsidian2.Notice("\u80AF\u5FB7\u57FA\u75AF\u72C2\u661F\u671F\u56DB V \u6211 50!");
    }
  }
};
var ConcentrationStaticModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("\u4E13\u6CE8\u603B\u65F6\u95F4\uFF1A199.2 \u5C0F\u65F6\n\n\n\n\u4E13\u6CE8\u6B21\u6570\uFF1A132 \u6B21");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
